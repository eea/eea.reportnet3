Index: dataset-service/src/main/java/org/eea/dataset/persistence/data/repository/RecordRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/dataset-service/src/main/java/org/eea/dataset/persistence/data/repository/RecordRepositoryImpl.java b/dataset-service/src/main/java/org/eea/dataset/persistence/data/repository/RecordRepositoryImpl.java
--- a/dataset-service/src/main/java/org/eea/dataset/persistence/data/repository/RecordRepositoryImpl.java	(revision 563fa6bb32e00d0505668ac795b5de586aadba1e)
+++ b/dataset-service/src/main/java/org/eea/dataset/persistence/data/repository/RecordRepositoryImpl.java	(date 1678715642091)
@@ -549,22 +549,31 @@
         // If there's no position that means we have to import the data from that request
         String query = "SELECT count(id) from dataset_" + datasetId + ".temp_etlexport " + "WHERE filter_value='" + filterChain + "';";
         Query recordsTmpExportQueryResult = entityManager.createNativeQuery(query);
+
+        DriverManagerDataSource dataSource = new DriverManagerDataSource();
+        dataSource.setDriverClassName(connectionDriver);
+        dataSource.setUrl(connectionUrl);
+        dataSource.setUsername(connectionUsername);
+        dataSource.setPassword(connectionPassword);
+        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
+
         try {
-          int recordsTmpExport = ((BigInteger) recordsTmpExportQueryResult.getSingleResult()).intValue();
+          int recordsTmpExport = jdbcTemplate.queryForObject(query, Integer.class).intValue();
+          //int recordsTmpExport = ((BigInteger) recordsTmpExportQueryResult.getSingleResult()).intValue();
           LOG.info("Table temp_etlexport has {} rows for filterChain {}. Total records : {}", recordsTmpExport, filterChain, totalRecords);
 
           while (recordsTmpExport != totalRecords) {
             if (recordsTmpExport != 0) {
               do {
                 LOG.info("Table temp_etlexport has {} rows for filterChain {}. Total records : {}. Deleting old records", recordsTmpExport, filterChain, totalRecords);
-                deleteTempEtlExportByFilterValue(datasetId, filterChain, recordsTmpExport);
+                deleteTempEtlExportByFilterValue(datasetId, filterChain, recordsTmpExport, jdbcTemplate);
 
-                recordsTmpExport = ((BigInteger) recordsTmpExportQueryResult.getSingleResult()).intValue();
+                recordsTmpExport = jdbcTemplate.queryForObject(query, Integer.class).intValue();
                 LOG.info("Table temp_etlexport has {} rows for filterChain {}. Records stored {}", recordsTmpExport, filterChain, recordsTmpExport);
               } while (recordsTmpExport != 0);
             }
             exportAndImportToEtlExportTable(datasetId, filterChain, stringQuery);
-            recordsTmpExport = ((BigInteger) recordsTmpExportQueryResult.getSingleResult()).intValue();
+            recordsTmpExport = jdbcTemplate.queryForObject(query, Integer.class).intValue();
           }
         } catch (Exception e) {
           LOG_ERROR.error("Error creating a file into the temp_etlexport from dataset {}", datasetId, e);
@@ -1622,20 +1631,14 @@
    * @param totalCountOfRecords
    */
   @Transactional
-  public void deleteTempEtlExportByFilterValue(Long datasetId, String filterValue, int totalCountOfRecords) {
+  public void deleteTempEtlExportByFilterValue(Long datasetId, String filterValue, int totalCountOfRecords, JdbcTemplate jdbcTemplate) {
     try {
       LOG.info("Delete totalCountOfRecords {} from table temp_etlexport for datasetId {} with filter_value {}", totalCountOfRecords, datasetId, filterValue);
       String datasetName = "dataset_" + datasetId;
       int loops = (int) Math.ceil(totalCountOfRecords / 100000);
       LOG.info("DatasetId loops {}", loops);
-      DriverManagerDataSource dataSource = new DriverManagerDataSource();
-      dataSource.setDriverClassName(connectionDriver);
-      dataSource.setUrl(connectionUrl);
-      dataSource.setUsername(connectionUsername);
-      dataSource.setPassword(connectionPassword);
       for (int i = 0; i <= loops; i++) {
         LOG.info("Delete from table temp_etlexport 100.000 records for datasetId {} loop No.: {}", datasetId, i);
-        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
         StringBuilder deleteSql = new StringBuilder("WITH rows AS (SELECT id FROM ");
         deleteSql.append(datasetName).append(".temp_etlexport where filter_value = '").append(filterValue).append("' LIMIT 100000) ");
         deleteSql.append("DELETE FROM ");
