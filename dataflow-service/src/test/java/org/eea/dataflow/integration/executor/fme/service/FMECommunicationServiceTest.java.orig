<<<<<<< HEAD
package org.eea.dataflow.integration.executor.fme.service;

import static org.mockito.Mockito.times;
import java.util.ArrayList;
import java.util.List;
import org.eea.dataflow.integration.executor.fme.mapper.FMECollectionMapper;
import org.eea.interfaces.vo.integration.fme.FMECollectionVO;
import org.eea.interfaces.vo.integration.fme.FMEItemVO;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Matchers;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

/**
 * The Class FMECommunicationServiceTest.
 */
@RunWith(MockitoJUnitRunner.class)
public class FMECommunicationServiceTest {

  /** The fme collection mapper. */
  @Mock
  private FMECollectionMapper fmeCollectionMapper;

  /** The rest template. */
  @Mock
  private RestTemplate restTemplate;

  /** The fme controller impl. */
  @InjectMocks
  private FMECommunicationService fmeCommunicationService;



  /** The collection VO. */
  FMECollectionVO collectionVO;

  /**
   * Inits the mocks.
   */
  @Before
  public void initMocks() {
    collectionVO = new FMECollectionVO();
    collectionVO.setTotalCount(2);
    FMEItemVO itemVO1 = new FMEItemVO();
    FMEItemVO itemVO2 = new FMEItemVO();
    List<FMEItemVO> items = new ArrayList<>();
    items.add(itemVO1);
    items.add(itemVO2);
    collectionVO.setItems(items);
    MockitoAnnotations.initMocks(this);
  }


  @Test
  public void testSubmitAsyncJob() throws Exception {
    Mockito
        .when(fmeCommunicationService.submitAsyncJob(Mockito.any(), Mockito.any(), Mockito.any()))
        .thenReturn(5);

    Object myobjectA = new Object();
    // define the entity you want the exchange to return
    ResponseEntity<List<Object>> myEntity = new ResponseEntity<List<Object>>(HttpStatus.ACCEPTED);
    Mockito.when(restTemplate.exchange(Matchers.eq("/objects/get-objectA"),
        Matchers.eq(HttpMethod.POST), Matchers.<HttpEntity<List<Object>>>any(),
        Matchers.<ParameterizedTypeReference<List<Object>>>any())).thenReturn(myEntity);

    fmeCommunicationService.submitAsyncJob(Mockito.any(), Mockito.any(), Mockito.any());
    Mockito.verify(fmeCommunicationService, times(1)).submitAsyncJob(Mockito.any(), Mockito.any(),
        Mockito.any());
  }

  @Test
  public void testSendFile() throws Exception {
    // TODO
    throw new RuntimeException("not yet implemented");
  }

  @Test
  public void testReceiveFile() throws Exception {
    // TODO
    throw new RuntimeException("not yet implemented");
  }

  @Test
  public void testFindRepository() throws Exception {
    // TODO
    throw new RuntimeException("not yet implemented");
  }

  @Test
  public void testFindItems() throws Exception {
    // TODO
    throw new RuntimeException("not yet implemented");
  }

}
=======
package org.eea.dataflow.integration.executor.fme.service;

import static org.mockito.Mockito.times;
import org.eea.exception.EEAException;
import org.eea.interfaces.vo.integration.enums.FMEOperation;
import org.eea.interfaces.vo.integration.fme.FMEOperationInfoVO;
import org.eea.kafka.utils.KafkaSenderUtils;
import org.eea.thread.ThreadPropertiesManager;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class FMECommunicationServiceTest {

  @InjectMocks
  private FMECommunicationService fmeCommunicationService;

  @Mock
  private KafkaSenderUtils kafkaSenderUtils;

  @Before
  public void initMocks() {
    ThreadPropertiesManager.setVariable("user", "user");
    MockitoAnnotations.initMocks(this);
  }

  @Test
  public void operationFinishedDesignTest() throws EEAException {
    FMEOperationInfoVO fmeOperationInfoVO = new FMEOperationInfoVO();
    fmeOperationInfoVO.setDatasetId(1L);
    fmeOperationInfoVO.setDataflowId(1L);
    fmeOperationInfoVO.setFileName("fileName");
    fmeOperationInfoVO.setFmeOperation(FMEOperation.IMPORT);
    Mockito.doNothing().when(kafkaSenderUtils).releaseNotificableKafkaEvent(Mockito.any(),
        Mockito.any(), Mockito.any());
    Mockito.doNothing().when(kafkaSenderUtils).releaseDatasetKafkaEvent(Mockito.any(),
        Mockito.any());
    fmeCommunicationService.operationFinished(fmeOperationInfoVO);
    Mockito.verify(kafkaSenderUtils, times(1)).releaseNotificableKafkaEvent(Mockito.any(),
        Mockito.any(), Mockito.any());
    Mockito.verify(kafkaSenderUtils, times(1)).releaseDatasetKafkaEvent(Mockito.any(),
        Mockito.any());
  }

  @Test
  public void operationFinishedReportingTest() throws EEAException {
    FMEOperationInfoVO fmeOperationInfoVO = new FMEOperationInfoVO();
    fmeOperationInfoVO.setDatasetId(1L);
    fmeOperationInfoVO.setDataflowId(1L);
    fmeOperationInfoVO.setProviderId(1L);
    fmeOperationInfoVO.setFileName("fileName");
    fmeOperationInfoVO.setFmeOperation(FMEOperation.IMPORT);
    Mockito.doNothing().when(kafkaSenderUtils).releaseNotificableKafkaEvent(Mockito.any(),
        Mockito.any(), Mockito.any());
    Mockito.doNothing().when(kafkaSenderUtils).releaseDatasetKafkaEvent(Mockito.any(),
        Mockito.any());
    fmeCommunicationService.operationFinished(fmeOperationInfoVO);
    Mockito.verify(kafkaSenderUtils, times(1)).releaseNotificableKafkaEvent(Mockito.any(),
        Mockito.any(), Mockito.any());
    Mockito.verify(kafkaSenderUtils, times(1)).releaseDatasetKafkaEvent(Mockito.any(),
        Mockito.any());
  }

  @Test(expected = UnsupportedOperationException.class)
  public void operationFinishedUnsupportedTest() throws EEAException {
    FMEOperationInfoVO fmeOperationInfoVO = new FMEOperationInfoVO();
    fmeOperationInfoVO.setDatasetId(1L);
    fmeOperationInfoVO.setDataflowId(1L);
    fmeOperationInfoVO.setProviderId(1L);
    fmeOperationInfoVO.setFileName("fileName");
    fmeOperationInfoVO.setFmeOperation(FMEOperation.EXPORT);
    try {
      fmeCommunicationService.operationFinished(fmeOperationInfoVO);
    } catch (UnsupportedOperationException e) {
      Assert.assertEquals("Not yet implemented", e.getMessage());
      throw e;
    }
  }

  @Test
  public void operationFinishedKafkaExceptionTest() throws EEAException {
    FMEOperationInfoVO fmeOperationInfoVO = new FMEOperationInfoVO();
    fmeOperationInfoVO.setDatasetId(1L);
    fmeOperationInfoVO.setDataflowId(1L);
    fmeOperationInfoVO.setProviderId(1L);
    fmeOperationInfoVO.setFileName("fileName");
    fmeOperationInfoVO.setFmeOperation(FMEOperation.IMPORT);
    Mockito.doThrow(EEAException.class).when(kafkaSenderUtils)
        .releaseNotificableKafkaEvent(Mockito.any(), Mockito.any(), Mockito.any());
    fmeCommunicationService.operationFinished(fmeOperationInfoVO);
    Mockito.verify(kafkaSenderUtils, times(1)).releaseNotificableKafkaEvent(Mockito.any(),
        Mockito.any(), Mockito.any());
    Mockito.verify(kafkaSenderUtils, times(0)).releaseDatasetKafkaEvent(Mockito.any(),
        Mockito.any());
  }
}
>>>>>>> origin/sandbox
