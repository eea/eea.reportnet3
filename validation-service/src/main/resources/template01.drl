template header
ruleid
dataSchemaId
schemaName
typevalidation
whencondition
messageFailValidation
typeFailValidation
originName
package src.main.resources

import org.eea.validation.persistence.data.domain.*;
import org.eea.interfaces.vo.validation.*;
import org.eea.interfaces.vo.dataset.*;
import org.eea.validation.util.*;
import java.util.regex.*;
import java.util.*;
import org.apache.commons.lang3.StringUtils;
import org.eea.validation.persistence.data.domain.RecordValue;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;


template "templateValidateRules"
rule "@{ruleid}"
dialect "java"
  when
    dataValidate : @{typevalidation}(@{schemaName}.equals("@{dataSchemaId}") && @{whencondition});
  then
   ValidationRuleDrools.fillValidation(dataValidate, "@{messageFailValidation}","@{typeFailValidation}","@{ruleid}","@{originName}");


end

end template

//QUERYS PART JAVA
function boolean  isQueryDataWDFProtect(String value){
	if(!isBlank(value)){
		value = "";
	}
	return ForeingKeyDrools.isQueryDataWDFProtect(value);
}

//CODE LIST PART
function boolean isCodeList( String value ,String codeList){
	if(!isBlank(value)){
		value = "";
	}
	return CodeListUtils.codeListValidate(value,codeList);
}

//RECORDS PART 
function boolean isInSameRecord( String value ,RecordValue record, Integer position, String valueToHave){
	if(!isBlank(value)){
		value = "";
	}
	return ForeingKeyDrools.isInSameRecord(value,record,position,valueToHave);
}

//URL PART
function boolean isURL( String value ){

	if(value == null || value.trim().equals("")){
		return true;
	}
    try {
         new URL(value).toURI();
         return true;
    }catch (URISyntaxException exception) {
         return false;
    }catch (MalformedURLException exception) {
         return false;
    }
 }


//NUMBER PART 
function boolean isNegativeValue(String value, String typeData){
 
	if("Integer".equalsIgnoreCase(typeData)){
		try {
	        Integer dato = Integer.valueOf(value);
	        if(dato < 0){
	        	return false;        
	        }
	    } catch( Exception e ){
	        return true;
	    }
 	}
 	return true;
}
 
function boolean isValid( String value , String typeData){

	if("Integer".equalsIgnoreCase(typeData)){
	
	 	try {
	        Integer.valueOf( value );
	        return true;
	    } catch( Exception e ){
	        return false;
	    }
	}
    try {
    	String aux = value.replace(".","");
    	aux = aux.replace(",",".");
        Double.valueOf( aux );
        return true;
    } catch( Exception e ){
        return false;
    }
 }
 


//TEXT AND NULL PART
function boolean isText( String value){
    try {
        Pattern pat = Pattern.compile("[^a-zA-Z0-9 ._-]$");
       	Matcher mat = pat.matcher(value);
        if(mat.find()){ 
        	return true;
        }else{
        	return false;
        }
    } catch( Exception e ){
        return false;
    }
 }
 
function boolean isBlank(String value){

	if(StringUtils.isBlank(value)){
		return false;
	}else{
		return true;
	}
} 

//FUNCTIONS DATES AND JAVA METHODS DATES


function boolean isIntervalYear( String value ,Integer initial, Integer end, Boolean interval){
	if(!isBlank(value)){
		value = "";
	}
	return DateDroolsUtils.isIntervalYear(value,initial,end,interval);
}
function boolean actualDateCompare(String dateToCompare,String moreLess){	
	return DateDroolsUtils.actualDateCompare(dateToCompare,moreLess);
} 
function boolean isDateYYYYMMDD( String value ){
    try {
        Pattern dataValue = Pattern.compile("^\\d{4}-\\d{2}-\\d{2}$");
       	Matcher dataMatcher = dataValue.matcher(value);
        if(dataMatcher.find()){
        	return true;
        }else{
        	return false;
        }
    } catch( Exception e ){
        return false;
    }
}
 
function boolean isDate9999(String date){
	if('9999-12-31'.equalsIgnoreCase(date)){
		return true;
	}	
	return false;
}
 
 
 //LATITUDE AND LONGITUDE PART
function boolean isCordenateLat( String value ){
	if(!isBlank(value)){
		value = "";
	}
   if (value.contains(",")){
   	value = value.replace(",",".");
   }
   if(isValid(value,'double')){
    	if(Double.valueOf(value) >= -90 && Double.valueOf(value) <= 90){
		   return true;   	
    	}
    	return false;
   }
   return false;
}  
function boolean isCordenateLong( String value ){	
	if(!isBlank(value)){
		value = "";
	}
   if (value.contains(",")){
   	value = value.replace(",",".");
   }
   if(isValid(value,'double')){
    	if(Double.valueOf(value) >= -180 && Double.valueOf(value) <= 180){
		   return true;   	
    	}
    	return false;
   }
   return false;
 }
 
 
 //// PART OF TABLE
 
 
 // PART OF DATASET

function Boolean datasetValidationDO02() {
return DatasetValidations.datasetValidationDO02();
}
  
function Boolean datasetValidationDO03() {
return DatasetValidations.datasetValidationDO03();
}
  
function Boolean datasetValidationDC01A() {
return DatasetValidations.datasetValidationDC01A();
}
  
function Boolean datasetValidationDC01B() {
return DatasetValidations.datasetValidationDC01B();
}
  
function Boolean datasetValidationDC02() {
return DatasetValidations.datasetValidationDC02();
}
  
function Boolean datasetValidationDC03() {
return DatasetValidations.datasetValidationDC03();
}
 
 //PART RECORD
 
//SEASIONALPERIOD TABLE
function boolean periodTypeValidation(Long idRecord, String idFieldSchemaPeriodeType,
      String idFieldShemaStartDate, String idFieldSchemaEnddate){
	return RecordValidationDrools.periodTypeValidation(idRecord,idFieldSchemaPeriodeType,idFieldShemaStartDate,idFieldSchemaEnddate);
}


function boolean startDateGoodDatesOrder(Long idRecord, String idFieldShemaStartDate, String idFieldSchemaEnddate){    
	return RecordValidationDrools.startDateGoodDatesOrder(idRecord,idFieldShemaStartDate,idFieldSchemaEnddate);
}


function boolean unknownDateStart(Long idRecord, String idFieldShemaPeriodType, String idFieldShemaStartDate){
	return RecordValidationDrools.unknownDateStart(idRecord,idFieldShemaPeriodType,idFieldShemaStartDate);
}

function boolean sameYearValidation(Long idRecord, String idFieldShemaDate, String idFieldSchemaSeason){
	return RecordValidationDrools.sameYearValidation(idRecord,idFieldShemaDate,idFieldSchemaSeason);
}


function boolean bathingSeasonDurationValidation(Long idRecord, String idFieldSchemaPeriodeType
,String idFieldShemaStartDate, String idFieldSchemaEnddate){
	return RecordValidationDrools.bathingSeasonDurationValidation(idRecord,idFieldSchemaPeriodeType,idFieldShemaStartDate,idFieldSchemaEnddate);
}

function boolean startAndEndUnknown(Long idRecord,String idFieldShemaStartDate, String idFieldSchemaEnddate){
	return RecordValidationDrools.startAndEndUnknown(idRecord,idFieldShemaStartDate,idFieldSchemaEnddate);
}


function boolean endUnknownPeriod(Long idRecord,String idFieldSchemaPeriodeType, String idFieldSchemaEnddate){
	return RecordValidationDrools.endUnknownPeriod(idRecord,idFieldSchemaPeriodeType,idFieldSchemaEnddate);
}

// MONITORING PART OF TABLES
//1
function boolean sameYearValidatioMonitoring(Long idRecord, String idFieldShemaDate, String idFieldSchemaSeason){
	return RecordValidationDrools.sameYearValidatioMonitoring(idRecord,idFieldShemaDate,idFieldSchemaSeason);
}

//2

function boolean maxValueintestinal(Long idRecord, String idFieldShemaIntestinalEnterococciValue, String idFieldSchemaIntestinalEnterococciStatus){
	return RecordValidationDrools.maxValueintestinal(idRecord,idFieldShemaIntestinalEnterococciValue,idFieldSchemaIntestinalEnterococciStatus);
}
//3
function boolean maxValueEscherichiaColi(Long idRecord, String idFieldSchemaEscherichiaColiValue, String idFieldSchemaEscherichiaColiStatus){
	return RecordValidationDrools.maxValueEscherichiaColi(idRecord,idFieldSchemaEscherichiaColiValue,idFieldSchemaEscherichiaColiStatus);
}
//4
function boolean generalStatusValidation(Long idRecord, String idFieldShemaIntestinalEnterococciStatus , 
String idFieldSchemaEscherichiaColiStatus,String idFieldSchemaSampleStatus ){
	return RecordValidationDrools.generalStatusValidation(idRecord,idFieldShemaIntestinalEnterococciStatus,
	idFieldSchemaEscherichiaColiStatus,idFieldSchemaSampleStatus);
}

//5


//6

//7


//8
function boolean intestinalEnterococciValueValidation(Long idRecord, String idFieldShemaIntestinalEnterococciValue, String idFieldSchemIntestinalEnterococciStatus){
	return RecordValidationDrools.intestinalEnterococciValueValidation(idRecord,idFieldShemaIntestinalEnterococciValue,idFieldSchemIntestinalEnterococciStatus);
}


//9
function boolean escherichiaColiStatusValidation(Long idRecord, String idFieldShemaEscherichiaColiValue, String idFieldSchemaEscherichiaColiStatus){
	return RecordValidationDrools.escherichiaColiStatusValidation(idRecord,idFieldShemaEscherichiaColiValue,idFieldSchemaEscherichiaColiStatus);
}