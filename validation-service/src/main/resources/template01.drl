template header
ruleid
dataSchemaId
schemaName
typevalidation
whencondition
messageFailValidation
typeFailValidation
originName

package src.main.resources

import org.eea.validation.persistence.data.domain.*;
import org.eea.interfaces.vo.validation.*;
import org.eea.interfaces.vo.dataset.*;
import org.eea.validation.util.*;
import java.util.regex.*;
import org.apache.commons.lang3.StringUtils;



template "templateValidateRules"
rule "@{ruleid}"
dialect "java"
  when
    dataValidate : @{typevalidation}(@{schemaName}.equals("@{dataSchemaId}") && @{whencondition});
  then
   ValidationRuleDrools.fillValidation(dataValidate, "@{messageFailValidation}","@{typeFailValidation}","@{ruleid}","@{originName}");


end

end template

function boolean isValid( String s ){

    try {
        Double.valueOf( s );
        return true;
    } catch( Exception e ){
        return false;
    }
 }
 
function boolean isText( String s ){
    try {
        Pattern pat = Pattern.compile("[^a-zA-Z0-9 ._-]$");
       	Matcher mat = pat.matcher(s);
        if(mat.find()){ 
        	return true;
        }else{
        	return false;
        }
    } catch( Exception e ){
        return false;
    }
 }
 
function boolean isBlank(String s){

	if(StringUtils.isBlank(s)){
		return false;
	}else{
		return true;
	}
} 
function boolean isDateYYYYMMDD( String s ){
    try {
        Pattern dataValue = Pattern.compile("^\\d{4}-\\d{2}-\\d{2}$");
       	Matcher dataMatcher = dataValue.matcher(s);
        if(dataMatcher.find()){
        	return true;
        }else{
        	return false;
        }
    } catch( Exception e ){
        return false;
    }
 }
 
 function boolean isCordenateLat( String s ){
   if (s.contains(",")){
   	s = s.replace(",",".");
   }
   if(isValid(s)){
    	if(Double.valueOf(s) >= -90 && Double.valueOf(s) <= 90){
		   return true;   	
    	}
    	return false;
   }
   return false;
 }  
function boolean isCordenateLong( String s ){	
   if (s.contains(",")){
   	s = s.replace(",",".");
   }
   if(isValid(s)){
    	if(Double.valueOf(s) >= -180 && Double.valueOf(s) <= 180){
		   return true;   	
    	}
    	return false;
   }
   return false;
 }
